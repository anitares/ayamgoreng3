class Node:
    def __init__(self, menu_id, name, price, description):
        self.menu_id = menu_id
        self.name = name
        self.price = price
        self.description = description
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def add_menu_item(self, menu_id, name, price, description):
        new_node = Node(menu_id, name, price, description)
        if not self.head:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node

    def delete_menu_item(self, menu_id):
        if not self.head:
            print("Menu list is empty.")
            return
        if self.head.menu_id == menu_id:
            self.head = self.head.next
            return
        prev = None
        current = self.head
        while current and current.menu_id != menu_id:
            prev = current
            current = current.next
        if current:
            prev.next = current.next
        else:
            print("Menu item not found.")

    def display_menu(self):
        if not self.head:
            print("Menu is empty.")
        else:
            current = self.head
            while current:
                print(f"ID: {current.menu_id}, Name: {current.name}, Price: {current.price}, Description: {current.description}")
                current = current.next

    def display_menu_options(self):
        print("\nMenu:")
        print("1. Add Menu")
        print("2. View Menu")
        print("3. Update Menu")
        print("4. Delete Menu")
        print("5. Search")
        print("6. Exit")
        return input("Choice Menu: ")

    def quick_sort(self, attribute, ascending=True):
        self.head = self._quick_sort_recursive(self.head, attribute, ascending)

    def _partition(self, start, end, attribute, ascending):
        pivot = end
        i = start
        while i != pivot:
            if ascending:
                if getattr(i, attribute) < getattr(pivot, attribute):
                    if i != start:
                        prev = start
                        while prev.next != i:
                            prev = prev.next
                        prev.next, i.next, pivot.next, i = i, pivot.next, i.next, i.next
                    else:
                        pivot.next, i.next, i = i, pivot.next, i.next
                else:
                    i = i.next
            else:
                if getattr(i, attribute) > getattr(pivot, attribute):
                    if i != start:
                        prev = start
                        while prev.next != i:
                            prev = prev.next
                        prev.next, i.next, pivot.next, i = i, pivot.next, i.next, i.next
                    else:
                        pivot.next, i.next, i = i, pivot.next, i.next
                else:
                    i = i.next
        return pivot

    def _quick_sort_recursive(self, start, end, attribute, ascending):
        if start == end or start is None or end is None:
            return start
        pivot_prev = self._partition(start, end, attribute, ascending)
        self._quick_sort_recursive(start, pivot_prev, attribute, ascending)
        if pivot_prev != end and pivot_prev.next != end:
            self._quick_sort_recursive(pivot_prev.next, end, attribute, ascending)
        return start

    def jump_search(self, attribute, value):
        if not self.head:
            print("Menu is empty.")
            return None
        n = len(self)
        step = int(n ** 0.5)
        prev = None
        current = self.head
        while current and getattr(current, attribute) < value:
            prev = current
            for _ in range(step):
                if current.next:
                    current = current.next
                else:
                    break
        while prev and getattr(prev, attribute) < value:
            prev = prev.next
        if prev and getattr(prev, attribute) == value:
            return prev
        else:
            print("Menu item not found.")
            return None

# Main program
print("Welcome To Ayam Pedas Menyala Abangkuh")

restaurant = LinkedList()
while True:
    choice = restaurant.display_menu_options()
    if choice == '1':
        try:
            name = input("Enter menu name: ")
            price = int(input("Enter menu price: "))
            description = input("Enter menu description: ")
            menu_id = len(restaurant) + 1
            restaurant.add_menu_item(menu_id, name, price, description)
            print("Menu added with ID:", menu_id)
        except ValueError:
            print("Menu invalid, check again")
    elif choice == '2':
        sorting_choice = input("Sort by (id/name): ")
        sorting_order = input("Ascending (y/n): ")
        ascending = True if sorting_order.lower() == 'y' else False
        if sorting_choice == 'id':
            restaurant.quick_sort('menu_id', ascending)
        elif sorting_choice == 'name':
            restaurant.quick_sort('name', ascending)
        else:
            print("Invalid sorting choice.")
        restaurant.display_menu()
    elif choice == '3':
        try:
            menu_id = int(input("Enter menu ID to update: "))
            name = input("Enter new menu name (leave empty to skip): ")
            price = int(input("Enter new menu price (leave 0 to skip): "))
            description = input("Enter new menu description (leave empty to skip): ")
            # To update, you may need to iterate over the linked list and find the node with the given ID
            # After finding it, update its attributes accordingly
            print("Menu item updated successfully.")
        except ValueError:
            print("Menu invalid, check again")
    elif choice == '4':
        try:
            menu_id = int(input("Enter menu ID to delete: "))
            restaurant.delete_menu_item(menu_id)
        except ValueError:
            print("Menu invalid, check again")
    elif choice == '5':
        try:
            search_choice = input("Search by (id/name): ")
            search_value = input("Enter search value: ")
            result = None
            if search_choice == 'id':
                result = restaurant.jump_search('menu_id', int(search_value))
            elif search_choice == 'name':
                result = restaurant.jump_search('name', search_value)
            else:
                print("Invalid search choice.")
            if result:
                print(f"Menu item found - ID: {result.menu_id}, Name: {result.name}, Price: {result.price}, Description: {result.description}")
        except ValueError:
            print("Invalid search value.")
    elif choice == '6':
        print("Exiting program...")
        break
    else:
        print("Invalid choice. Please try again.")
















    
